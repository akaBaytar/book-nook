generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  clerkId   String     @unique
  email     String?    @unique
  firstName String?
  lastName  String?
  tbr       Tbr[]
  books     Book[]
  lists     List[]
  checkList CheckList?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@index([clerkId])
}

model Book {
  id              String    @id @default(uuid())
  userId          String
  listId          String?
  name            String
  author          String
  publisher       String
  rating          Decimal   @default(5) @db.Decimal(3, 1)
  type            BookType  @default(BOOK)
  pageCount       Int
  completed       Boolean   @default(false)
  favorite        Boolean   @default(false)
  readingNow      Boolean   @default(false)
  genre           String[]
  image           String?   @db.Text
  translator      String?
  illustrator     String?
  language        String?
  quote           String?   @db.Text
  summary         String?   @db.Text
  category        String
  volume          Int?
  isbn            String?   @unique
  printing        Int?
  publicationDate DateTime?
  acquiredDate    DateTime?
  startDate       DateTime?
  endDate         DateTime?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  list            List?     @relation(fields: [listId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@index([userId])
  @@index([listId])
}

model List {
  id          String   @id @default(uuid())
  userId      String
  name        String
  description String?  @db.Text
  books       Book[]
  privacy     Privacy  @default(PUBLIC)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}

model Tbr {
  id        String   @id @default(uuid())
  userId    String
  name      String
  completed Boolean  @default(false)
  favorite  Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model CheckList {
  id        String          @id @default(uuid())
  userId    String         @unique
  name      String
  items     CheckListItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CheckListItem {
  id          String    @id @default(uuid())
  checkListId String
  name        String
  completed   Boolean   @default(false)
  checkList   CheckList @relation(fields: [checkListId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([checkListId])
}

enum Privacy {
  PUBLIC
  PRIVATE
}

enum BookType {
  BOOK
  EBOOK
  AUDIO_BOOK
}
